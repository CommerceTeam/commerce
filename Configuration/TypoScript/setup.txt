plugin.tx_commerce_pi1.userFunc = CommerceTeam\Commerce\Controller\ListController->main
plugin.tx_commerce_pi2.userFunc = CommerceTeam\Commerce\Controller\BasketController->main
plugin.tx_commerce_pi3.userFunc = CommerceTeam\Commerce\Controller\CheckoutController->main
plugin.tx_commerce_pi4.userFunc = CommerceTeam\Commerce\Controller\AddressesController->main
plugin.tx_commerce_pi6.userFunc = CommerceTeam\Commerce\Controller\InvoiceController->main

# general TS script definition
# could be overwritten by local definition in pi1 - pin

# Allow pi1 to become a USER_INT via GPVar
[globalVar = GP:commerce_pi1_user_int = 1]
plugin.tx_commerce_pi1 = USER_INT
[global]



page.includeCSS {
	commerce = EXT:commerce/Resources/Public/CSS/commerce.css
	commerce.media = all
}


# -----------------------------------------------------------------------
lib.tx_commerce {
	# switch on StockHandling
	useStockHandling = {$plugin.tx_commerce_lib.useStockHandling}

	stdField = stdWrap
	stdField.setContentToCurrent = 1
	stdField.if.isTrue.current  = 1
	stdField.wrap = |

	stdFieldsGreater = stdWrap
	stdFieldsGreater.setContentToCurrent = 1
	stdFieldsGreater.if.isLessThan = 0
	stdFieldsGreater.if.value.stdWrap.current = 1

	stdField_RTE = stdWrap
	stdField_RTE.setContentToCurrent = 1
	stdField_RTE.if.isTrue.current  = 1
	stdField_RTE.wrap = |
	stdField_RTE.parseFunc < lib.parseFunc_RTE

	attributes {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		iconMode = 0

		fields {
			# every colum in this table could be  wraped with the
			# stdWrap, IMAGETEXT, IMAGE, GIFBUILDER

			title < lib.tx_commerce.stdField

			unit < lib.tx_commerce.stdField

			value < lib.tx_commerce.stdField

			icon = IMAGE
			icon {
				defaultImgConf {
					file.import.current = 1
				}
				file.maxW = 30
			}
		}
	}

	article_prices {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		fields {
			# every colum in this table could be  wraped with the
			# stdWrap, IMAGETEXT, IMAGE, GIFBUILDER
			pricenet < lib.tx_commerce.stdField
			pricegross < lib.tx_commerce.stdField
			# feel free to add every other field from tx_commerce_article_prices
		}
	}

	articles {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		addToBasketLink = TypoLink
		defaultQuantity = 0
		fields {
			# every column in this table could be  wraped with the
			# stdWrap, IMAGETEXT, IMAGE

			title < lib.tx_commerce.stdField
			description_extra < lib.tx_commerce.stdField_RTE

			images = IMAGE
			images {
				defaultImgConf {
					file.import.current = 1
				}
				file.maxW = 150
			}
		}
	}


	products {
		# Activate Edit Panel
		# !!! EditIcons are not Edit Panel !
		# editPanel = 1
		# editPanel.allow = edit, new

		# unset default new line to br, since we are using RTE rendering for TeaserFields
		nl2br = 0
		stdWrap < lib.tx_commerce.stdField
		defaultField  < lib.tx_commerce.stdField

		productAttributes < lib.tx_commerce.attributes

		fields {
			# every colum in this table could be  wraped with the
			# stdWrap, IMAGETEXT, IMAGE, GIFBUILDER

			title  < lib.tx_commerce.stdField
			title.typolink.setCommerceValues = 1
			title.typolink.useCacheHash = 1

			subtitle < lib.tx_commerce.stdField
			navtitle < lib.tx_commerce.stdField

			description < lib.tx_commerce.stdField_RTE

			images = IMAGE
			images {
				defaultImgConf {
					file.import.current = 1
				}
				file.import.current = 1
				file.maxW = 150
			}

			teaser < lib.tx_commerce.stdField_RTE

			teaserimages >
			teaserimages = IMAGE
			teaserimages {
				wrap = <div class="com-category-teaser-img">|</div>

				file.import.current = 1
				file.maxW = 69

				stdWrap {
				  typolink.setCommerceValues = 1
				  typolink.useCacheHash = 1
				}
			}
		}
	}

	topproducts < products

	categories {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		fields {
			# every colum in this table could be  wraped with the
			# stdWrap, IMAGETEXT, IMAGE, GIFBUILDER

			title < lib.tx_commerce.stdField
			title.wrap = <h2>|</h2>

			title.typolink.setCommerceValues = 1
			title.typolink.useCacheHash = 1
			subtitle < lib.tx_commerce.stdField
			subtitle.wrap = <div class="com-category-subtitle">|</div>

			description < lib.tx_commerce.stdField_RTE
			description.wrap = <div class="com-category-desc">|</div>

			# feel free to add every other field from tx_commerce_categories

			images = IMAGE
			images.wrap = <div class="com-category-img">|</div>
			images {
				defaultImgConf {
					file.import.current = 1
				}
				file.maxW = 150
			}

			teaser < lib.tx_commerce.stdField_RTE
			teaserimages =IMAGE
			teaserimages {
				file.import.current = 1
				file.maxW = 69
			}
		}
	}

	basket_items.default {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		fields {
			priceNet < lib.tx_commerce.stdField
			priceGross < lib.tx_commerce.stdField
			quanitity < lib.tx_commerce.stdField
			# feel free to add every other field from tx_commerce_baskets
		}

		virtualFields {
			sumNet < lib.tx_commerce.stdField
			sumGross < lib.tx_commerce.stdField
			sumTax < lib.tx_commerce.stdField
		}
	}

	# basket_items.1 is used for the standard Basket Item (normal Article)
	# basket_items.2 is used for the paymet Articles
	# basket_items.3 is used for the delivery Article
	# @see tx_commerce_articles_types

	basket_items.1 < .basket_items.default
	basket_items.2 < .basket_items.default
	basket_items.3 < .basket_items.default

	baskets {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		fields {
			sid < lib.tx_commerce.stdField
		}

		virtualFields {
			sumNet < lib.tx_commerce.stdField
			sumGross < lib.tx_commerce.stdField
			sumTax < lib.tx_commerce.stdField
		}
	}

	tt_address {
		stdWrap < lib.tx_commerce.stdField
		defaultField < lib.tx_commerce.stdField

		fields {
			name < lib.tx_commerce.stdField
			surename < lib.tx_commerce.stdField
			# feel free to add every other field from tt_adress
		}
	}
}



# -----------------------------------------------------------------------
plugin.tx_commerce_pi1 {
	# bool - display product direct if only one product exist
	displayProductIfOneProduct = {$plugin.tx_commerce_lib.displayProductIfOneProduct}

	showErrors = {$plugin.tx_commerce_lib.showErrors}

	# ID wo das Basket als Template eingebunden ist.
	basketPid = {$plugin.tx_commerce_lib.basketPid}

	# Page ID for list view
	listPid = {$plugin.tx_commerce_lib.listPid}

	# Page ID for single view
	singlePid = {$plugin.tx_commerce_lib.singlePid}

	# OverridePID for Detailview
	overridePid = {$plugin.tx_commerce_lib.overridePid}

	# currency used from moneylib
	currency = {$plugin.tx_commerce_lib.currency}

	# switch on StockHandling
	useStockHandling  < lib.tx_commerce.useStockHandling

	products.showWithNoStock = 1
	articles.showWithNoStock = 1

	# add parameter deepth an dpath to URL for a even faster rendering of the navigation
	useRootlineInformationToUrl = {$plugin.tx_commerce_lib.useRootlineInformationToUrl}

	# amountvalue of the inputfields for the basket
	defaultArticleAmount = 1

	# chars if more than one Line of Attributes
	attributeLinebreakChars = {$plugin.tx_commerce_pi1.attributeLinebreakChars}

	# stdWrap around every attributevalue if more than one is selected
	mutipleAttributeValueWrap < lib.tx_commerce.stdField
	# stdWrap around the attributevalueset if more than one is selected
	mutipleAttributeValueSetWrap < lib.tx_commerce.stdField

	# Default maxRecords
	maxRecords = 10
	maxPages = 10

	# Default inserting PageBrowser
	showPageBrowser = 1

	wrapInBaseClass = 1

	# The main TemplateFile
	templateFile = {$plugin.tx_commerce_pi1.templateFile}

	# Change the templateMarker for product List to an iteration System
	# Now unlimeted Marker can be defined, same for topProducts
	# Array with Template Marker from 0 to x as key
	templateMarker.categoryProductList.0 = CATEGORY_ITEMS_LISTVIEW_2
	templateMarker.categoryProductList.1 = CATEGORY_ITEMS_LISTVIEW_3
	templateMarker.categoryProductListTop.0 = CATEGORY_ITEMS_LISTVIEW_1

	# templateMarker.categoryProductList.0
	# Number of Iterations in the Product List
	templateMarker.categoryProductListIterations =  2
	templateMarker.categoryProductListTopIterations =  1

	# Template marker for articleView of a product
	# if not set, old system is used
	templateMarker.basketListView.0 = ARTICLE_VIEW
	templateMarker.basketSingleView.0 = ARTICLE_VIEW
	# NAME of SUBPART Marker for Article, can be defined either in the Product or general
	templateMarker.basketListViewMarker = PRODUCT_BASKET_FOR_LISTVIEW
	templateMarker.basketSingleViewMarker = PRODUCT_BASKET_FOR_SINGLEVIEW
	templateMarker.categorySingleViewMarker = CATEGORY_ITEM
	# Template marker for different views
	templateMarker {
		categoryView = CATEGORY_VIEW_DISPLAY
		categoryProductList = CATEGORY_ITEMS_LISTVIEW_2
		productView = PRODUCT_VIEW_DETAIL
		relatedProductSingle = RELATED_PRODUCT_SINGLE
		relatedProductList = RELATED_PRODUCTS
		# Default: use the same template for all attributes
		productAttributes = PRODUCT_ATTRIBUTES
		productAttributes2 = PRODUCT_ATTRIBUTES2
		articleAttributes = ARTICLE_ATTRIBUTES
		articleAttributes2 = ARTICLE_ATTRIBUTES2
		list_selectAttributes.0 = SELECT_ATTRIBUTES
		list_selectAttributes.1 = SELECT_ATTRIBUTES2
		productAttributesSelectorDropdown = SELECTOR_ATTRIBUTES_DROPDOWN
		productAttributesSelectorRadiobutton = SELECTOR_ATTRIBUTES_RADIOBUTTON

		# make a selector Element or show all Artikels
	}

	# show one or all Artikels
	allArticles = 1
	hideProductsInList = 0
	hideProductsInSubcategories = 0
	displayTopProducts = 1
	topProductTSMarker = Top
	catUid = {$plugin.tx_commerce_lib.catUid}

	hideEmptyCategories = {$plugin.tx_commerce_lib.hideEmptyCategories}

	# how to handle attributes
	# hide empty ones?
	hideEmptyProdAttr = 1
	hideEmptyShalAttr = 0
	hideEmptyCanAttr = 1
	# hide Attributes with no true for show value
	showHiddenValues = 0

	singleView {
		products < lib.tx_commerce.products
		products {
			fields {
				title.wrap = <h2>|</h2>
				description.wrap = <div class="com-single-desc">|</div>
			}
		}
		products.categories < lib.tx_commerce.categories
		products.categories  {
			fields {
				title.wrap = <h3>|</h3>
			}
		}
		products.relatedProducts < lib.tx_commerce.products
		articles < lib.tx_commerce.articles
		products.nostock < lib.tx_commerce.products
		articles.nostock < lib.tx_commerce.articles
		attributes < lib.tx_commerce.attributes
		categories < lib.tx_commerce.categories
		products.productAttributes.iconMode = 0

		articleAttributesList = stdWrap
		articleAttributesList.wrap = <table class="com-list-attributes" cellspacing="0" cellpadding="0" border="0"> | </table>
		articleAttributesSelectList = stdWrap
		articleAttributesSelectList.wrap = <table class="com-select-attributes" cellspacing="0" cellpadding="0" border="0"> | </table>

		renderProductNameAsPageTitle = 1
		# 0 dont' render product title as page title
		# 1 render always product title as page title in single view
		# 2 only render product title as page title, if product was not inserted as plugin with one product to display and if product was not set via TS
	}

	listView {
		categories < lib.tx_commerce.categories
		products < lib.tx_commerce.products
		articles < lib.tx_commerce.articles
		topproducts < lib.tx_commerce.topproducts
		products.nostock < lib.tx_commerce.products
		articles.nostock < lib.tx_commerce.articles
	}

	listViewTop {
		products < lib.tx_commerce.products
		articles < lib.tx_commerce.articles
		products.nostock < lib.tx_commerce.products
		articles.nostock < lib.tx_commerce.articles
		categories < lib.tx_commerce.categories
	}

	general_stdWrap {
		brTag = <br/>
		parseFunc < tt_content.text.20.parseFunc
	}

	categoryListView.categories < lib.tx_commerce.categories

	pageBrowser {
		#dontLinkActivePage = 1
		#showFirstLast = 1
		#showItemCount = 1
		tableParams =
		#showRange = 1
		wraps {
			disabledLinkWrap = <span class="disabled">|</span>
			inactiveLinkWrap = |
			activeLinkWrap = <strong>|</strong>
			browseLinksWrap = |
			showResultsWrap = <div>|</div>
			showResultsNumbersWrap = |
			browseBoxWrap = <div class="pagebrowser">|</div>
		}
	}
}



#
# Commerce PlugIn 2 (Basket)
#
plugin.tx_commerce_pi2 {
	priceFromNet = {$plugin.tx_commerce_lib.priceFromNet}

	showErrors = {$plugin.tx_commerce_lib.showErrors}
	# defines the systemproducts ID's has to be changed later, so that it isn't needed anymore
	delProdId = {$plugin.tx_commerce_lib.delProdId}
	payProdId = {$plugin.tx_commerce_lib.payProdId}
	templateFile = {$plugin.tx_commerce_pi2.templateFile}
	regularArticleTypes =  {$plugin.tx_commerce_lib.regularArticleTypes}

	# DefaultCode for inserting a basketElement with TS [quickview,handling,]
	defaultCode =

	useStockHandling  < lib.tx_commerce.useStockHandling
	# If the actual Stock should be checked
	checkStock = 1

	# defines the page for the pi1 plugin
	listPid = {$plugin.tx_commerce_lib.overridePid}

	# defines the page for the pi3 plugin
	checkoutPid = {$plugin.tx_commerce_lib.checkoutPid}

	# defines itself for changing the del and payment articles
	# also used for the quickview
	basketPid = {$plugin.tx_commerce_lib.basketPid}

	# Basket storage pid
	basketStoragePid = {$plugin.tx_commerce_lib.basketStoragePid}

	# The default Payment Article
	# If set to > 1 this article Uid will be added by default, if no Payment
	# is selected by the user
	defaultPaymentArticleId = {$plugin.tx_commerce_lib.paymentArticleId}

	# allowed Articles for the delivery
	# comma separated list of delivery article uids
	delivery.allowedArticles >

	# allowed Articles for the payment
	# comma separated list of payment article uids
	payment.allowedArticles >

	# currency used for moneylib
	currency = {$plugin.tx_commerce_lib.currency}
	templateMarker {
		items_listview = BASKET_ITEMS_LISTVIEW
		items_listview2 = BASKET_ITEMS_LISTVIEW2
		# make a selector Element or show all Articles
	}

	fields < lib.tx_commerce

	emptyContent = CONTENT
	emptyContent {
		table = tt_content
		select {
			# will be given within php-code
			pidInList = {$plugin.tx_commerce_lib.emptyBasketPid}
			orderBy = sorting
			languageField = sys_language_uid
		}
	}
	# link around lang_basket_delete_item
	deleteItem = typolink

	lastProduct < lib.tx_commerce.stdField
	nextbutton < lib.tx_commerce.stdField
}



#
# Commerce PlugIn 3 (Checkout)
#
plugin.tx_commerce_pi3 {
	noStockBackPID = 20
	useStockHandling  < lib.tx_commerce.useStockHandling
	checkStock = 1

	noStockWrap.wrap = <div class="cmrc_mb_no_stock">|</div>

	# defines the systemproducts ID's has to be changed later, so that it isn't needed anymore
	delProdId = {$plugin.tx_commerce_lib.delProdId}
	payProdId = {$plugin.tx_commerce_lib.payProdId}

	# Comma separated list of PIDs with the commerce plugin pi1 to clear cache
	clearCacheAfterFinishWithStock >

	priceFromNet = {$plugin.tx_commerce_lib.priceFromNet}

	showErrors = {$plugin.tx_commerce_lib.showErrors}
	templateFile = {$plugin.tx_commerce_pi3.templateFile}

	# some settings for addresses
	addressMgmPid =  {$plugin.tx_commerce_lib.editAddressPid}

	privacyAgreementUrl.parameter = {$plugin.tx_commerce_lib.privacyAgreementPid}
	termsAndConditionsUrl.parameter = {$plugin.tx_commerce_lib.termsAndConditionsUrl}

	# Types for regular ArticleTypes
	regularArticleTypes = {$plugin.tx_commerce_lib.regularArticleTypes}

	# wrap around an active Step in the step bar
	# active steps will be linked to the step
	activeStep = stdWrap
	activeStep.wrap = <b>|</b>
	activeStep.typolink.setCommerceValues = 1

	actualStep = stdWrap
	actualStep.wrap = <b>|</b>

	# wrap arount an incative step in the step bar
	inactiveStep = stdWrap
	inactiveStep.wrap = <i>|</i>

	# sets Usermail Charset and Encoding
	usermail {
		showCurrency = 0
		charset = utf-8
		encoding = 8bit
		priority = 3
		from = john.doe@somewhere.com
		cc =
		bcc =
		# Do not user non Asci-Chars here, as not supported by MAIL
		from_name = Commerce ShopMaster
		alternateSubject = NEW ORDER at Commerce
		templateFile = {$plugin.tx_commerce_pi3.UserMailTemplateFile}
		# use Html-Mail
		useHtml = {$plugin.tx_commerce_pi3.useHtmlMail}
		templateFileHtml = {$plugin.tx_commerce_pi3.UserMailTemplateFileHtml}
	}

	# sets AdminMail Charset and Encoding
	adminmail {
		showCurrency = 0
		charset = utf-8
		encoding = 8bit
		priority = 3
		# send adminmail withusername set "sendAsUser" = 1
		sendAsUser = 1
		from = john.doe@somewhere.com
		from_name = Commerce ShopMaster
		alternateSubject = ADMIN SHOP MAIL
		cc =
		bcc =
		mailto = yourname@server.com
		templateFile = {$plugin.tx_commerce_pi3.AdminMailTemplateFile}
		# use Html-Mail
		useHtml = {$plugin.tx_commerce_pi3.useHtmlMail}
		templateFileHtml = {$plugin.tx_commerce_pi3.AdminMailTemplateFileHtml}
	}

	# currency used for moneylib
	currency = {$plugin.tx_commerce_lib.currency}
	# currency Id used for orderData
	currencyId = {$plugin.tx_commerce_lib.currencyId}


	# define a Marker for payment example "creditcard"
	creditcard {
		subpartMarker {
			listItem = ###PAYMENT###
		}
	}

	billing {
		# additional formparams for the address form tag
		formParams =

		subpartMarker {
			listItem = ###ADDRESS_LIST###
			containerWrap = ###ADDRESS_CONTAINER###
		}
		deliveryAdress.delivery_radio.wrap = |
		deliveryAdress.nodelivery_radio.wrap = |
		deliveryAdress.delivery_label.wrap = <label for="delivery">|</label>
		deliveryAdress.nodelivery_label.wrap = <label for="nodelivery">|</label>

		addressType = 1
		userConnection = tx_commerce_fe_user_id
		sourceTable = tt_address
		sourceLimiter {
			field = tx_commerce_address_type_id
			value = 1
		}

		sourceFields {
			name.mandatory = 1
			surname.mandatory = 1
			company.mandatory = 0
			address.mandatory = 1
			zip.mandatory = 1
			city.mandatory = 1
			country {
				type = static_info_country
				table = static_countries
				label = cn_short_en
				value = cn_iso_3
				# [ALL, UN, EU]
				country_association = ALL
				select = 1
				default = DEU
				mandatory = 1
				readonly = 0
			}
			email {
				mandatory = 1
				eval = email,username
			}
			phone.mandatory = 0

			password {
				type = password
				mandatory = 0
			}
			passwordRetype {
				type = password
				mandatory = 0
			}
		}

		mandatorySign = *
		mandatorySignStdWrap < lib.tx_commerce.stdField

			# the password is taken from session instead to generate a random one
		dontUseRandomPassword = 1

			# this list is excluded from fieldlist before data is written to tt_address
		tt_adressExcludeFields = password,passwordRetype,emailRetype
	}

	delivery < .billing
	delivery.addressType = 2
	delivery.sourceLimiter.value = 2
	delivery.sourceFields.email.eval = email

	createNewUsers = 1
	# Place where new user are stored
	userPID = {$plugin.tx_commerce_lib.userPid}
	# Place where the adresses are stored
	addressPid = {$plugin.tx_commerce_lib.addressPid}
	# Normally the orders are stored in the commerce/order/incomming Folder
	# you can overwirte the default behavior by setting
	# newOrderPid to your own PID
	# newOrderPid = 120

	# ID of the default Usergroup
	userGroup = {$plugin.tx_commerce_lib.userGroup}

	# if the terms an conditions should be cheked by default
	termsdefaultchecked >
	terms.errorWrap = <b>|</b><br />

	paymentIsDeliveryAdressDefault = 1
	deliveryAdressIsSeparateDefault = 0

	cantMakeCheckout.noarticles = CONTENT
	cantMakeCheckout.noarticles {
		table = tt_content
		select {
			# will be given within php-code
			pidInList = {$plugin.tx_commerce_lib.emptyCheckoutPid}
			orderBy = sorting
			languageField = sys_language_uid
		}
	}
	cantMakeCheckout.nobilling < plugin.tx_commerce_pi3.cantMakeCheckout.noarticles
	cantMakeCheckout.nopayment < plugin.tx_commerce_pi3.cantMakeCheckout.noarticles
}



#
# Commerce PlugIn 4 (Addresses)
#
plugin.tx_commerce_pi4 {
	templateFile = {$plugin.tx_commerce_pi4.templateFile}

	# basic settings
	minAddressCount = {$plugin.tx_commerce_pi4.minAddressCount}
	selectAddressTypes = 1,2
	editAddressPid = {$plugin.tx_commerce_lib.editAddressPid}
	addressPid = {$plugin.tx_commerce_lib.addressPid}

	billing < plugin.tx_commerce_pi3.billing
	billing {
		subpartMarker {
			listItem = ###ADDRESS_ITEM###
			listWrap = ###ADDRESS_LISTING###
			editWrap = ###ADDRESS_EDIT###
			editItem = ###ADDRESS_EDIT_FORM###
			editField = ###SINGLE_INPUT###
		}
	}

	delivery < plugin.tx_commerce_pi3.delivery
	delivery {
		subpartMarker {
			listItem = ###ADDRESS_ITEM###
			listWrap = ###ADDRESS_LISTING###
			editWrap = ###ADDRESS_EDIT###
			editItem = ###ADDRESS_EDIT_FORM###
			editField = ###SINGLE_INPUT###
		}
	}

	# some wraps
	addressHeaderWrap.wrap = <h1>|</h1>
	editLinkWrap.wrap = |
	deleteLinkWrap.wrap = |
	newLinkWrap.wrap = |
	yesLinkWrap.wrap = |
	noLinkWrap.wrap = |
	sysMessageWrap.wrap = <div style="color:green">|</div>
	sysErrorMessageWrap.wrap = <div style="color:red">|</div>

	# general options for display
	hideEmptyFields = 0
	emptyFieldSign = -
	# form description
	formFields {
		name.mandatory = 1
		# optional, special class name for an field
		name.class = classname
		surname.mandatory = 1
		company.mandatory = 0
		address.mandatory = 1
		zip.mandatory = 1
		city.mandatory = 1
		country {
			type = static_info_tables
			field = COUNTRIES
			select = 1
			default = DEU
			mandatory = 1
			readonly = 0
		}
		email {
			mandatory = 1
			eval = email
		}
	}
	mandatorySign = *
}



#
# Commerce PlugIn 6 (Invoice)
#
plugin.tx_commerce_pi6 {
	templateFile = {$plugin.tx_commerce_pi6.templateFile}
	currency = {$plugin.tx_commerce_lib.currency}
	orderDateFormat = %d.%m.%y
	# Add the Currency Sign to the invoice Output wherever a Currency is printed
	showCurrencySign =1
	# set this to 1 if you are going to print pdfs
	# decode = 1
	invoiceheader = IMAGE
	invoiceheader.file = fileadmin/images/someimage.gif
	invoiceheader.file.width = 680
	shopname.value = Your Shop
	shopdetails = COA
	shopdetails {
		1 = TEXT
		1.value = 123 Main streetSomewhere, some country
		2 = TEXT
		2.value = tel: +123456789fax: +1234567890email: shop@yoursite.com
	}
	intro.value = Your order details are below:
	intro.lang {
		de = Sie haben sich für den(die) folgenden Artikel entschieden:
	}
	thankyou.value = Thank you for your order, and please visit us any time at http:#yoursite.com [^]
	thankyou.lang {
		de = Vielen Dank für das Vertrauen, das Sie uns mit Ihrem Einkauf auf www.yoursite.com entgegengebraucht haben!
	}

	address {
		stdWrap < lib.tx_commerce.stdField
		stdWrap.wrap = |
		defaultField < lib.tx_commerce.stdField
		defaultField.wrap = |

		fields {
			surname < lib.tx_commerce.stdField
			surname.wrap = |<br/>
			company < lib.tx_commerce.stdField
			company.wrap = |<br/>
			address < lib.tx_commerce.stdField
			address.wrap = |<br/>
			city < lib.tx_commerce.stdField
			city.wrap = |<br/>
 		}
	}
	addressDelivery < plugin.tx_commerce_pi6.address
	addressDelivery.stdWrap.wrap = <div class="com-invoice-delivery">|</div>
	addressBilling < plugin.tx_commerce_pi6.address
	addressBilling.stdWrap.wrap = <div class="com-invoice-billing">|</div>

	OrderArticles {
		stdWrap < lib.tx_commerce.stdField
		stdWrap.wrap = |
		defaultField < lib.tx_commerce.stdField

		fields {
			title.wrap = |
		}
	}
}



#
# Comerce Menue
#
lib.tx_commerce.navigation  = HMENU
lib.tx_commerce.navigation {
	special = userfunction
	special.userFunc = CommerceTeam\Commerce\ViewHelpers\NavigationViewHelper->init
	special {
		# Kategorie fuerr Startebene
		category = {$plugin.tx_commerce_lib.catUid}
		# zeige Producte
		showProducts = 0
		# PID fuer die Anzeige der Seite
		overridePid = {$plugin.tx_commerce_lib.overridePid}
		# EntryLervel
		entryLevel = 0

		# Maximum Level in the Navigation
		# lower this value to only have given amount of levels displayed
		maxLevel = PHP_INT_MAX

		# No Active Elements
		# saves lots of renderTime
		noAct = 0

		# Hide empty Categories
		hideEmptyCategories = {$plugin.tx_commerce_lib.hideEmptyCategories}

		# additionalFields
		# comma separated list auf additional fields to process to the menue
		# additionalFields = teaser, teaserimages

		# List of categories, where to display the manufacturere in adition to the catgeories in the menue
		displayManuForCat >

		# add parameter deepth an dpath to URL for a even faster rendering of the navigation
		useRootlineInformationToUrl = {$plugin.tx_commerce_lib.useRootlineInformationToUrl}
		# Menuebenen

		expandAll = 0
	}

	1 = TMENU
	1.NO = 1
	1.itemArrayProcFunc = CommerceTeam\Commerce\ViewHelpers\NavigationViewHelper->clear

	2 = TMENU
	2.NO = 1
	2.itemArrayProcFunc = CommerceTeam\Commerce\ViewHelpers\NavigationViewHelper->clear

	3 = TMENU
	3.NO = 1
	3.itemArrayProcFunc = CommerceTeam\Commerce\ViewHelpers\NavigationViewHelper->clear
}



#
# Commerce Rootline
#
lib.tx_commerce.rootline  = HMENU
lib.tx_commerce.rootline {
	special = userfunction
	special.userFunc = CommerceTeam\Commerce\ViewHelpers\NavigationViewHelper->renderRootline
	special {
		# Root category for the display
		category = {$plugin.tx_commerce_lib.catUid}

		# show products
		showProducts = 1

		# PID for displaying the products
		overridePid = {$plugin.tx_commerce_lib.overridePid}
	}

	1 = TMENU
	1.NO.linkWrap = |*|| > |*||
}



# insert record support for products
tt_content.shortcut.20.0.tables := addToList(tx_commerce_products)
tx_commerce_products < plugin.tx_commerce_pi1
tx_commerce_products.templateFile = EXT:commerce/Resources/Private/Templates/category_product.html
tx_commerce_products.insertRecord = products

# insert record support for categories
tt_content.shortcut.20.0.tables := addToList(tx_commerce_categories)
tx_commerce_categories < plugin.tx_commerce_pi1
tx_commerce_categories.templateFile = EXT:commerce/Resources/Private/Templates/category_product.html
tx_commerce_categories.insertRecord = categories
